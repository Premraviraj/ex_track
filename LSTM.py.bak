import os
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'

import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from pymongo import MongoClient
import argparse
import base64
from io import BytesIO
import logging
import traceback

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

class FinancialAnalyzer:
    def __init__(self):
        try:
            logger.debug("Initializing FinancialAnalyzer")
            self.client = MongoClient('mongodb://localhost:27017/')
            self.db = self.client['expense-tracker']
            self.scaler = MinMaxScaler()
            logger.debug("Successfully connected to MongoDB")
        except Exception as e:
            logger.error(f"Failed to connect to MongoDB: {str(e)}")
            raise

    def fetch_data(self):
        try:
            logger.debug("Fetching data from MongoDB")
            
            # Fetch UPI transactions
            upi_data = list(self.db.upi_transactions.find({}))
            logger.debug(f"Retrieved {len(upi_data)} UPI transactions")
            upi_df = pd.DataFrame(upi_data)
            if not upi_df.empty:
                upi_df['source'] = 'UPI'
                upi_df['type'] = 'Expense'

            # Fetch Cash transactions
            cash_data = list(self.db.cash_transactions.find({}))
            logger.debug(f"Retrieved {len(cash_data)} cash transactions")
            cash_df = pd.DataFrame(cash_data)
            if not cash_df.empty:
                cash_df['source'] = 'Cash'
                cash_df['type'] = 'Expense'

            # Fetch Daily savings
            savings_data = list(self.db.daily_savings.find({}))
            logger.debug(f"Retrieved {len(savings_data)} savings records")
            savings_df = pd.DataFrame(savings_data)
            if not savings_df.empty:
                savings_df['type'] = 'Savings'

            # Combine all data
            df = pd.concat([upi_df, cash_df, savings_df], ignore_index=True)
            if 'date' in df.columns:
                df['date'] = pd.to_datetime(df['date'])
            else:
                logger.error("No 'date' column found in the data")
                return None

            logger.debug(f"Combined data shape: {df.shape}")
            return df
        except Exception as e:
            logger.error(f"Error fetching data: {str(e)}")
            return None

    def get_processed_data(self):
        try:
            logger.debug("Processing data")
            df = self.fetch_data()
            if df is None or df.empty:
                logger.error("No data available for processing")
                return None, None

            df.set_index('date', inplace=True)

            # Process expenses
            expenses = df[df['type'] == 'Expense']['amount']
            expenses = expenses.resample('D').sum().fillna(0)
            logger.debug(f"Processed expenses data points: {len(expenses)}")

            # Process savings
            savings = df[df['type'] == 'Savings']['amount']
            savings = savings.resample('D').sum().fillna(0)
            logger.debug(f"Processed savings data points: {len(savings)}")

            return expenses, savings
        except Exception as e:
            logger.error(f"Error processing data: {str(e)}")
            return None, None

    def plot_expenses(self, expenses, view='W'):
        try:
            logger.debug(f"Plotting expenses with view: {view}")
            if expenses is None or len(expenses) == 0:
                logger.error("No expenses data to plot")
                return None

            plt.figure(figsize=(10, 6))
            if view == 'W':
                data = expenses.resample('W').sum()
                title = 'Weekly Expenses'
            else:
                data = expenses.resample('ME').sum()
                title = 'Monthly Expenses'

            plt.plot(data.index, data.values, 'r-', label='Expenses')
            plt.title(title)
            plt.xlabel('Date')
            plt.ylabel('Amount (₹)')
            plt.grid(True)
            plt.xticks(rotation=45)
            plt.legend()
            plt.tight_layout()
            
            # Save plot to a BytesIO object
            buf = BytesIO()
            plt.savefig(buf, format='png')
            plt.close()
            buf.seek(0)
            graph_data = base64.b64encode(buf.getvalue()).decode('utf-8')
            logger.debug(f"Generated expenses plot with data length: {len(graph_data)}")
            return graph_data
        except Exception as e:
            logger.error(f"Error plotting expenses: {str(e)}")
            return None

    def plot_savings(self, savings, freq='W'):
        """Plot savings trends with LSTM predictions"""
        try:
            # Resample data
            weekly_savings = savings.resample('W').sum()
            monthly_savings = savings.resample('ME').sum()
            
            # Prepare data for LSTM
            weekly_data = weekly_savings.values.reshape(-1, 1)
            monthly_data = monthly_savings.values.reshape(-1, 1)
            
            # Create and train models
            weekly_model = self._create_lstm_model()
            monthly_model = self._create_lstm_model()
            
            # Train models
            weekly_model.fit(
                self._prepare_data(weekly_data)[0],
                self._prepare_data(weekly_data)[1],
                epochs=50,
                batch_size=32,
                verbose=0
            )
            
            monthly_model.fit(
                self._prepare_data(monthly_data)[0],
                self._prepare_data(monthly_data)[1],
                epochs=50,
                batch_size=32,
                verbose=0
            )
            
            # Make predictions
            weekly_pred = weekly_model.predict(self._prepare_data(weekly_data)[0])
            monthly_pred = monthly_model.predict(self._prepare_data(monthly_data)[0])
            
            # Create figure with subplots
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
            
            # Plot weekly savings
            ax1.plot(weekly_savings.index, weekly_savings.values, 'b-', label='Actual Weekly Savings')
            ax1.plot(weekly_savings.index[-len(weekly_pred):], weekly_pred, 'r--', label='LSTM Prediction')
            ax1.set_title('Weekly Savings Trend with LSTM Prediction')
            ax1.set_xlabel('Date')
            ax1.set_ylabel('Amount (₹)')
            ax1.legend()
            ax1.grid(True)
            
            # Plot monthly savings
            ax2.plot(monthly_savings.index, monthly_savings.values, 'g-', label='Actual Monthly Savings')
            ax2.plot(monthly_savings.index[-len(monthly_pred):], monthly_pred, 'r--', label='LSTM Prediction')
            ax2.set_title('Monthly Savings Trend with LSTM Prediction')
            ax2.set_xlabel('Date')
            ax2.set_ylabel('Amount (₹)')
            ax2.legend()
            ax2.grid(True)
            
            plt.tight_layout()
            
            # Save plot to bytes
            buf = BytesIO()
            plt.savefig(buf, format='png', bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            return base64.b64encode(buf.getvalue()).decode('utf-8')
            
        except Exception as e:
            logger.error(f"Error in plot_savings: {str(e)}")
            logger.error(traceback.format_exc())
            return None

    def plot_savings_projection(self, savings, months=3):
        try:
            logger.debug(f"Plotting savings projection for {months} months")
            if savings is None or len(savings) == 0:
                logger.error("No savings data to plot projection")
                return None

            monthly_savings = savings.resample('ME').sum()
            if len(monthly_savings) < 2:
                logger.error("Not enough data for projection")
                return None

            plt.figure(figsize=(12, 6))
            plt.plot(monthly_savings.index, monthly_savings.values,
                     label='Historical', color='blue')

            avg_monthly_saving = monthly_savings.mean()
            last_date = monthly_savings.index[-1]
            future_dates = pd.date_range(start=last_date, periods=months+1, freq='ME')[1:]
            trend_line = [monthly_savings.iloc[-1]]

            for _ in range(len(future_dates)):
                trend_line.append(trend_line[-1] + avg_monthly_saving)

            plt.plot(future_dates, trend_line[1:],
                     label='Projection', color='green', linestyle='--')

            plt.title(f'Savings Projection (Next {months} Months)')
            plt.xlabel('Date')
            plt.ylabel('Amount (₹)')
            plt.legend()
            plt.grid(True)
            plt.xticks(rotation=45)

            plt.annotate(f'Avg Monthly Saving: ₹{avg_monthly_saving:,.2f}',
                         xy=(0.02, 0.95), xycoords='axes fraction')

            plt.tight_layout()
            
            # Save plot to a BytesIO object
            buf = BytesIO()
            plt.savefig(buf, format='png')
            plt.close()
            buf.seek(0)
            graph_data = base64.b64encode(buf.getvalue()).decode('utf-8')
            logger.debug(f"Generated savings projection plot with data length: {len(graph_data)}")
            return graph_data
        except Exception as e:
            logger.error(f"Error plotting savings projection: {str(e)}")
            return None

    def predicted_next_month_savings(self, savings):
        monthly_savings = savings.resample('ME').sum()
        if len(monthly_savings) < 2:
            print("Not enough data for prediction.")
            return
        avg_saving = monthly_savings.mean()
        print(f"\nBy the next month, you can save: ₹{avg_saving:,.2f}")

    def predicted_next_week_savings(self, savings):
        weekly_savings = savings.resample('W').sum()
        if len(weekly_savings) < 2:
            print("Not enough data for prediction.")
            return
        avg_weekly_saving = weekly_savings.mean()
        print(f"\nBy the next week, you can save: ₹{avg_weekly_saving:,.2f}")

def display_menu():
    print("\n=== Financial Analysis Menu ===")
    print("1. View Expenses (Weekly)")
    print("2. View Expenses (Monthly)")
    print("3. View Savings (Weekly)")
    print("4. View Savings (Monthly)")
    print("5. View Savings Projection")
    print("6. Predict Next Month Estimated Savings")
    print("7. Predict Next Week Estimated Savings")
    print("8. Exit")
    return input("Choose an option (1-8): ")

def main():
    parser = argparse.ArgumentParser(description='Financial Analysis with LSTM')
    parser.add_argument('--projection', type=int, help='Number of months for savings projection')
    parser.add_argument('--next-month', action='store_true', help='Predict next month savings')
    parser.add_argument('--next-week', action='store_true', help='Predict next week savings')
    parser.add_argument('--expenses', choices=['weekly', 'monthly'], help='View expenses (weekly or monthly)')
    args = parser.parse_args()

    analyzer = FinancialAnalyzer()
    expenses, savings = analyzer.get_processed_data()

    if args.expenses:
        analyzer.plot_expenses(expenses, 'W' if args.expenses == 'weekly' else 'ME')
    elif args.projection:
        analyzer.plot_savings_projection(savings, args.projection)
    elif args.next_month:
        analyzer.predicted_next_month_savings(savings)
    elif args.next_week:
        analyzer.predicted_next_week_savings(savings)
    else:
        while True:
            choice = display_menu()

            if choice == '1':
                analyzer.plot_expenses(expenses, 'W')
            elif choice == '2':
                analyzer.plot_expenses(expenses, 'ME')
            elif choice == '3':
                analyzer.plot_savings(savings, 'W')
            elif choice == '4':
                analyzer.plot_savings(savings, 'ME')
            elif choice == '5':
                months = int(input("Enter number of months for projection (1-12): "))
                months = max(1, min(12, months))
                analyzer.plot_savings_projection(savings, months)
            elif choice == '6':
                analyzer.predicted_next_month_savings(savings)
            elif choice == '7':
                analyzer.predicted_next_week_savings(savings)
            elif choice == '8':
                print("Thank you for using Financial Analyzer!")
                break
            else:
                print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()

